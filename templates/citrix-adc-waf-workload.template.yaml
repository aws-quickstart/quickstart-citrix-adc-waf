---
AWSTemplateFormatVersion: "2010-09-09"
Description: "
  This template creates a HA pair across Availability Zones with two instance of Citrix WAF:
  3 ENIs associated to 3 VPC subnets (Management, Client, Server) on primary and 3 ENIs associated
  to 3 VPC subnets (Management, Client, Server) on secondary.
  All the resource names created by this CFT will be prefixed with a tagName of the stackname
  **WARNING** This template creates AWS resources.
  You will be billed for the AWS resources used if you create a stack from this template."

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - BastionSecurityGroupID
          - RestrictedSSHCIDR
          - RestrictedWebAppCIDR
          - PrimaryManagementPrivateSubnetID
          - PrimaryClientPublicSubnetID
          - PrimaryServerPrivateSubnetID
          - SecondaryManagementPrivateSubnetID
          - SecondaryClientPublicSubnetID
          - SecondaryServerPrivateSubnetID
          - PrimaryManagementPrivateIP
          - PrimaryClientPrivateIP
          - PrimaryServerPrivateIP
          - SecondaryManagementPrivateIP
          - SecondaryClientPrivateIP
          - SecondaryServerPrivateIP
          - VPCTenancy

      - Label:
          default: Citrix WAF configuration
        Parameters:
          - KeyPairName
          - CitrixADCInstanceType
          - CitrixADCIAMRole
          - ClientEIPRequired
          - CitrixADCImageID

      - Label:
          default: Licensing mode configuration
        Parameters:
          - LicensingMode

      - Label:
          default: Pooled licensing configuration
        Parameters:
          - PooledLicense

      - Label:
          default: License server configuration - (used only if PooledLicense is Yes)
        Parameters:
          - ADMIP

      - Label:
          default: Pooled licensing configuration (used only if licensing mode is Pooled-Licensing)
        Parameters:
          - Bandwidth
          - PooledEdition

      - Label:
          default: CICO licensing configuration (used only if licensing mode is CICO-Licensing)
        Parameters:
          - Platform

      - Label:
          default: VCPU licensing configuration (used only if licensing mode is CPU-Licensing)
        Parameters:
          - VCPUEdition

      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix

    ParameterLabels:
      CitrixADCImageID:
        default: Citrix WAF AMI ID

      VPCID:
        default: VPC ID
      PrimaryManagementPrivateSubnetID:
        default: Primary management private subnet ID
      PrimaryClientPublicSubnetID:
        default: Primary client public subnet ID
      PrimaryServerPrivateSubnetID:
        default: Primary server private subnet ID

      SecondaryManagementPrivateSubnetID:
        default: Secondary management private subnet ID
      SecondaryClientPublicSubnetID:
        default: Secondary client public subnet ID
      SecondaryServerPrivateSubnetID:
        default: Secondary server private subnet ID

      PrimaryManagementPrivateIP:
        default: Primary management private IP (NSIP)
      PrimaryClientPrivateIP:
        default: Primary client private IP (VIP)
      PrimaryServerPrivateIP:
        default: Primary server private IP (SNIP)
      SecondaryManagementPrivateIP:
        default: Secondary management private IP (NSIP)
      SecondaryClientPrivateIP:
        default: Secondary client private IP (VIP)
      SecondaryServerPrivateIP:
        default: Secondary server private IP (SNIP)
      BastionSecurityGroupID:
        default: Bastion security group ID

      VPCTenancy:
        default: VPC tenancy attribute
      RestrictedWebAppCIDR:
        default: Restricted Web App CIDR
      RestrictedSSHCIDR:
        default: Restricted SSH CIDR
      KeyPairName:
        default: Key pair name
      CitrixADCInstanceType:
        default: Citrix WAF instance type
      CitrixADCIAMRole:
        default: Citrix WAF IAM role
      ClientEIPRequired:
        default: Assign elastic IP to client VIP

      PooledLicense:
        default: Pooled license from ADM
      ADMIP:
        default: ADM agent IP address
      LicensingMode:
        default: Licensing mode
      Platform:
        default: Appliance platform type
      Bandwidth:
        default: License bandwidth in Mbps
      PooledEdition:
        default: Pooled edition
      VCPUEdition:
        default: vCPU Edition

      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix

Parameters:
  CitrixADCImageID:
    Type: String
    Default: ""
    Description: >-
      (Optional) Specify AMI ID of Citrix WAF to be provisioned. If left empty, "Citrix Web App Firewall (WAF) - 200 Mbps Version 13.0-52.24 (https://aws.amazon.com/marketplace/pp/B08286P96W)" is provisioned by default. Or, If you are opting for pooled license from ADM, enter latest BYOL AMI ID here.
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: The ID of your existing VPC (e.g., vpc-0343606e).
  VPCTenancy:
    Description: The allowed tenancy of instances launched into the VPC.
    Type: String
    Default: default
    AllowedValues:
      - default
      - dedicated
  PrimaryManagementPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: >-
      Private subnet ID of an existing subnet dedicated for primary management ENI.
      Note - The CIDR should be different from that of VPC.
  PrimaryClientPublicSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: >-
      Public subnet ID of an existing subnet dedicated for primary client ENI.
  PrimaryServerPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: >-
      Private subnet ID of an existing subnet dedicated for primary server ENI.
  SecondaryManagementPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: >-
      Private subnet ID of an existing subnet dedicated for secondary management ENI.
  SecondaryClientPublicSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: >-
      Public subnet ID of an existing subnet dedicated for secondary client ENI.
  SecondaryServerPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: >-
      Private subnet ID of an existing subnet dedicated for secondary server ENI.
  PrimaryManagementPrivateIP:
    Default: ""
    Type: String
    Description: >-
      (Optional) Leave empty for automatic assignment. Private IP address assigned to the primary management ENI (last octet has to be between 5 and 254).
  PrimaryClientPrivateIP:
    Default: ""
    Type: String
    Description: >-
      (Optional) Leave empty for automatic assignment. Private IP address assigned to the primary client ENI (last octet has to be between 5 and 254).
  PrimaryServerPrivateIP:
    Default: ""
    Type: String
    Description: >-
      (Optional) Leave empty for automatic assignment. Private IP address assigned to the primary server ENI (last octet has to be between 5 and 254).
  SecondaryManagementPrivateIP:
    Default: ""
    Type: String
    Description: >-
      (Optional) Leave empty for automatic assignment. Private IP address assigned to the secondary management ENI (last octet has to be between 5 and 254).
  SecondaryClientPrivateIP:
    Default: ""
    Type: String
    Description: >-
      (Optional) Leave empty for automatic assignment. Private IP address assigned to the secondary client ENI (last octet has to be between 5 and 254).
  SecondaryServerPrivateIP:
    Default: ""
    Type: String
    Description: >-
      (Optional) Leave empty for automatic assignment. Private IP address assigned to the secondary server ENI (last octet has to be between 5 and 254).
  BastionSecurityGroupID:
    Type: String
    Default: ""
    Description: >-
      (Optional) The security group ID associated with the bastion host, if present.
      This will be used to allow access from the bastion hosts to the interfaces belonging to the security groups that will be created for the Citrix WAF HA pair.
      Effectively the bastion hosts will be able to open connections to all WAF interfaces (management, client and server).
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets. This bucket name can include
      numbers, lowercase letters, uppercase letters, and hyphens (-), but should
      not start or end with a hyphen. You can specify your own bucket if you
      copy all of the assets and submodules into it, if you want to override the
      Quick Start behavior for your specific implementation.
    Type: String
  QSS3BucketRegion:
    Default: "us-east-1"
    Description: "The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*/$"
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: quickstart-citrix-adc-waf/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  RestrictedWebAppCIDR:
    Type: String
    MinLength: 9
    MaxLength: 18
    Description:
      "A CIDR block that is allowed to access the web apps behind WAF on tcp ports 80, 443.
      We recommend that you use a constrained CIDR range to
      reduce the potential of inbound attacks from unknown IP addresses."
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  RestrictedSSHCIDR:
    Type: String
    MinLength: 9
    MaxLength: 18
    Description:
      "A CIDR block that is allowed to access the bastion host(if present) or WAF management interface on port 22.
      We recommend that you use a constrained CIDR range to
      reduce the potential of inbound attacks from unknown IP addresses."
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  KeyPairName:
    Description: EC2 key pair name to remotely access ADC instances on port 22 (SSH).
    Type: AWS::EC2::KeyPair::KeyName
  CitrixADCInstanceType:
    Default: m4.xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
    Type: String
    Description:
      "Note: Please ensure that the instance type opted aligns with the instance types
            available in the AWS marketplace for the region of deployment."
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
  CitrixADCIAMRole:
    Description: "(Optional) If left empty, the deployment will create the required IAM role. Refer to https://docs.citrix.com/en-us/citrix-adc/13/deploying-vpx/deploy-aws/prerequisites.html for more details"
    Type: String
    Default: ""

  PooledLicense:
    Description: Choose Yes to allocate license via ADM
    Type: String
    Default: "No"
    AllowedValues:
      - "No"
      - "Yes"

  LicensingMode:
    Description: "(Optional) Choose the licensing mode"
    Type: String
    Default: ""
    AllowedValues:
      - ""
      - "Pooled-Licensing"
      - "CICO-Licensing"
      - "CPU-Licensing"
  ADMIP:
    Description: "(Optional) The IP address of the ADM agent reachable from the ADC instances."
    Type: String
    Default: ""
  Bandwidth:
    Description: >-
      Initial bandwidth of the license in Mbps to be allocated after BYOL ADCs are created. Should be multiple of 10 Mbps.
       Default is 0 Mbps. This is used only if licensing mode is Pooled-Licensing.
    Type: Number
    Default: 0
  PooledEdition:
    Description: "(Optional) License edition for pooled capacity licensing mode. This is used only if licensing mode is Pooled-Licensing"
    Type: String
    Default: Premium
    AllowedValues:
      - Premium
  VCPUEdition:
    Description: "(Optional) License edition for vCPU licensing mode. This is needed only if licensing mode is CPU-Licensing."
    Type: String
    Default: Premium
    AllowedValues:
      - Premium
  Platform:
    Description: "(Optional) License platform. This is needed only if licensing mode is CICO-Licensing."
    Type: String
    Default: ""
    AllowedValues:
      - ""
      - VPX-200
      - VPX-1000
      - VPX-3000
      - VPX-5000
  ClientEIPRequired:
    Type: String
    Default: "Yes"
    Description: Choose No to assign client elastic IP address manually after the deployment.
    AllowedValues:
      - "No"
      - "Yes"

Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, "aws-quickstart"]
  CreateIAMRole: !Equals [!Ref CitrixADCIAMRole, ""]
  UseClientEIP: !Equals [!Ref ClientEIPRequired, "Yes"]
  UsePooledLicense: !Equals [!Ref PooledLicense, "Yes"]

Resources:
  SecurityGroupStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/security-group.template.yaml
        - S3Region:
            !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
          S3Bucket:
            !If [
              UsingDefaultBucket,
              !Sub "${QSS3BucketName}-${AWS::Region}",
              !Ref QSS3BucketName,
            ]
      Parameters:
        VPCID: !Ref VPCID
        RestrictedWebAppCIDR: !Ref RestrictedWebAppCIDR
        RestrictedSSHCIDR: !Ref RestrictedSSHCIDR
        BastionSecurityGroupID: !Ref BastionSecurityGroupID

  IAMRoleStack:
    Condition: CreateIAMRole
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/iam.template.yaml
        - S3Region:
            !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
          S3Bucket:
            !If [
              UsingDefaultBucket,
              !Sub "${QSS3BucketName}-${AWS::Region}",
              !Ref QSS3BucketName,
            ]

  PrimaryADCInstance:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/citrix-adc.template.yaml
        - S3Region:
            !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
          S3Bucket:
            !If [
              UsingDefaultBucket,
              !Sub "${QSS3BucketName}-${AWS::Region}",
              !Ref QSS3BucketName,
            ]
      Parameters:
        CitrixADCImageID: !Ref CitrixADCImageID
        ManagementSecurityGroup: !GetAtt SecurityGroupStack.Outputs.ManagementSecurityGroupID
        ClientSecurityGroup: !GetAtt SecurityGroupStack.Outputs.ClientSecurityGroupID
        ServerSecurityGroup: !GetAtt SecurityGroupStack.Outputs.ServerSecurityGroupID
        ManagementPrivateSubnetID: !Ref PrimaryManagementPrivateSubnetID
        ClientPublicSubnetID: !Ref PrimaryClientPublicSubnetID
        ServerPrivateSubnetID: !Ref PrimaryServerPrivateSubnetID
        ManagementPrivateIP: !Ref PrimaryManagementPrivateIP
        ClientPrivateIP: !Ref PrimaryClientPrivateIP
        ServerPrivateIP: !Ref PrimaryServerPrivateIP
        ClientENIEIP: !Ref ClientEIPRequired
        ADCInstanceTagName: Primary
        KeyPairName: !Ref KeyPairName
        VPCTenancy: !Ref VPCTenancy
        CitrixNodesProfile: !If
          - CreateIAMRole
          - !GetAtt IAMRoleStack.Outputs.CitrixNodesProfile
          - !Ref CitrixADCIAMRole
        CitrixADCInstanceType: !Ref CitrixADCInstanceType

  SecondaryADCInstance:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/citrix-adc.template.yaml
        - S3Region:
            !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
          S3Bucket:
            !If [
              UsingDefaultBucket,
              !Sub "${QSS3BucketName}-${AWS::Region}",
              !Ref QSS3BucketName,
            ]
      Parameters:
        CitrixADCImageID: !Ref CitrixADCImageID
        ManagementSecurityGroup: !GetAtt SecurityGroupStack.Outputs.ManagementSecurityGroupID
        ClientSecurityGroup: !GetAtt SecurityGroupStack.Outputs.ClientSecurityGroupID
        ServerSecurityGroup: !GetAtt SecurityGroupStack.Outputs.ServerSecurityGroupID
        ManagementPrivateSubnetID: !Ref SecondaryManagementPrivateSubnetID
        ClientPublicSubnetID: !Ref SecondaryClientPublicSubnetID
        ServerPrivateSubnetID: !Ref SecondaryServerPrivateSubnetID
        ManagementPrivateIP: !Ref SecondaryManagementPrivateIP
        ClientPrivateIP: !Ref SecondaryClientPrivateIP
        ServerPrivateIP: !Ref SecondaryServerPrivateIP
        ClientENIEIP: "No"
        ADCInstanceTagName: Secondary
        KeyPairName: !Ref KeyPairName
        VPCTenancy: !Ref VPCTenancy
        CitrixNodesProfile: !If
          - CreateIAMRole
          - !GetAtt IAMRoleStack.Outputs.CitrixNodesProfile
          - !Ref CitrixADCIAMRole
        CitrixADCInstanceType: !Ref CitrixADCInstanceType

  LambdaCopierStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/lambda-copier.template.yaml
        - S3Region:
            !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
          S3Bucket:
            !If [
              UsingDefaultBucket,
              !Sub "${QSS3BucketName}-${AWS::Region}",
              !Ref QSS3BucketName,
            ]
      Parameters:
        QSS3BucketName:
          !If [
            UsingDefaultBucket,
            !Sub "${QSS3BucketName}-${AWS::Region}",
            !Ref QSS3BucketName,
          ]
        QSS3KeyPrefix: !Ref QSS3KeyPrefix

  PrimaryPooledLicenseStack:
    Condition: UsePooledLicense
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/lambda-pooled-license.template.yaml
        - S3Region:
            !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
          S3Bucket:
            !If [
              UsingDefaultBucket,
              !Sub "${QSS3BucketName}-${AWS::Region}",
              !Ref QSS3BucketName,
            ]
      Parameters:
        ADCInstanceID: !GetAtt PrimaryADCInstance.Outputs.CitrixADCInstanceID
        ADMIP: !Ref ADMIP
        Bandwidth: !Ref Bandwidth
        LicensingMode: !Ref LicensingMode
        ManagementPrivateIP: !GetAtt PrimaryADCInstance.Outputs.ManagementPrivateNSIP
        ManagementPrivateSubnetID: !Ref PrimaryManagementPrivateSubnetID
        ManagementSecurityGroupID: !GetAtt SecurityGroupStack.Outputs.ManagementSecurityGroupID
        Platform: !Ref Platform
        PooledEdition: !Ref PooledEdition
        QSS3BucketName: !GetAtt LambdaCopierStack.Outputs.LambdaZipsBucket
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        VCPUEdition: !Ref VCPUEdition

  SecondaryPooledLicenseStack:
    Condition: UsePooledLicense
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/lambda-pooled-license.template.yaml
        - S3Region:
            !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
          S3Bucket:
            !If [
              UsingDefaultBucket,
              !Sub "${QSS3BucketName}-${AWS::Region}",
              !Ref QSS3BucketName,
            ]
      Parameters:
        ADCInstanceID: !GetAtt SecondaryADCInstance.Outputs.CitrixADCInstanceID
        ADMIP: !Ref ADMIP
        Bandwidth: !Ref Bandwidth
        LicensingMode: !Ref LicensingMode
        ManagementPrivateIP: !GetAtt SecondaryADCInstance.Outputs.ManagementPrivateNSIP
        ManagementPrivateSubnetID: !Ref SecondaryManagementPrivateSubnetID
        ManagementSecurityGroupID: !GetAtt SecurityGroupStack.Outputs.ManagementSecurityGroupID
        Platform: !Ref Platform
        PooledEdition: !Ref PooledEdition
        QSS3BucketName: !GetAtt LambdaCopierStack.Outputs.LambdaZipsBucket
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        VCPUEdition: !Ref VCPUEdition

  LambdaHAAZStack:
    Metadata:
      PseudoDependsOn: !If
        - UsePooledLicense
        - - !Ref PrimaryPooledLicenseStack
          - !Ref SecondaryPooledLicenseStack
        - ''
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/lambda-ha-across-az.template.yaml
        - S3Region:
            !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
          S3Bucket:
            !If [
              UsingDefaultBucket,
              !Sub "${QSS3BucketName}-${AWS::Region}",
              !Ref QSS3BucketName,
            ]
      Parameters:
        PrimaryInstanceID: !GetAtt PrimaryADCInstance.Outputs.CitrixADCInstanceID
        PrimaryManagementPrivateIP: !GetAtt PrimaryADCInstance.Outputs.ManagementPrivateNSIP
        PrimaryClientPrivateIP: !GetAtt PrimaryADCInstance.Outputs.ClientPrivateVIP
        PrimaryClientPublicSubnetID: !Ref PrimaryClientPublicSubnetID
        SecondaryInstanceID: !GetAtt SecondaryADCInstance.Outputs.CitrixADCInstanceID
        SecondaryManagementPrivateIP: !GetAtt SecondaryADCInstance.Outputs.ManagementPrivateNSIP
        SecondaryClientPrivateIP: !GetAtt SecondaryADCInstance.Outputs.ClientPrivateVIP
        ManagementSecurityGroupID: !GetAtt SecurityGroupStack.Outputs.ManagementSecurityGroupID
        PrimaryManagementPrivateSubnetID: !Ref PrimaryManagementPrivateSubnetID
        SecondaryManagementPrivateSubnetID: !Ref SecondaryManagementPrivateSubnetID
        QSS3BucketName: !GetAtt LambdaCopierStack.Outputs.LambdaZipsBucket
        QSS3KeyPrefix: !Ref QSS3KeyPrefix

  LambdaServersActiveActiveStack:
    DependsOn: LambdaHAAZStack
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/lambda-servers-active-active.template.yaml
        - S3Region:
            !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
          S3Bucket:
            !If [
              UsingDefaultBucket,
              !Sub "${QSS3BucketName}-${AWS::Region}",
              !Ref QSS3BucketName,
            ]
      Parameters:
        PrimaryInstanceID: !GetAtt PrimaryADCInstance.Outputs.CitrixADCInstanceID
        PrimaryManagementPrivateIP: !GetAtt PrimaryADCInstance.Outputs.ManagementPrivateNSIP
        SecondaryInstanceID: !GetAtt PrimaryADCInstance.Outputs.CitrixADCInstanceID
        SecondaryManagementPrivateIP: !GetAtt SecondaryADCInstance.Outputs.ManagementPrivateNSIP
        QSS3BucketName: !GetAtt LambdaCopierStack.Outputs.LambdaZipsBucket
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        ManagementSecurityGroupID: !GetAtt SecurityGroupStack.Outputs.ManagementSecurityGroupID
        PrimaryManagementPrivateSubnetID: !Ref PrimaryManagementPrivateSubnetID
        SecondaryManagementPrivateSubnetID: !Ref SecondaryManagementPrivateSubnetID
        PrimaryServerPrivateSubnetID: !Ref PrimaryServerPrivateSubnetID
        SecondaryServerPrivateSubnetID: !Ref SecondaryServerPrivateSubnetID

  LambdaWAFStack:
    DependsOn: LambdaServersActiveActiveStack
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/lambda-waf.template.yaml
        - S3Region:
            !If [UsingDefaultBucket, !Ref "AWS::Region", !Ref QSS3BucketRegion]
          S3Bucket:
            !If [
              UsingDefaultBucket,
              !Sub "${QSS3BucketName}-${AWS::Region}",
              !Ref QSS3BucketName,
            ]
      Parameters:
        PrimaryInstanceID: !GetAtt PrimaryADCInstance.Outputs.CitrixADCInstanceID
        PrimaryManagementPrivateIP: !GetAtt PrimaryADCInstance.Outputs.ManagementPrivateNSIP
        QSS3BucketName: !GetAtt LambdaCopierStack.Outputs.LambdaZipsBucket
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        ManagementSecurityGroupID: !GetAtt SecurityGroupStack.Outputs.ManagementSecurityGroupID
        PrimaryManagementPrivateSubnetID: !Ref PrimaryManagementPrivateSubnetID
        SecondaryManagementPrivateSubnetID: !Ref SecondaryManagementPrivateSubnetID

Outputs:
  ManagementSecurityGroupID:
    Description: Security group ID for management WAF ENIs
    Value: !GetAtt SecurityGroupStack.Outputs.ManagementSecurityGroupID
  ClientSecurityGroupID:
    Description: Security group ID for client WAF ENIs
    Value: !GetAtt SecurityGroupStack.Outputs.ClientSecurityGroupID
  ServerSecurityGroupID:
    Description: Security group ID for server WAF ENIs
    Value: !GetAtt SecurityGroupStack.Outputs.ServerSecurityGroupID
  InstanceProfileName:
    Condition: CreateIAMRole
    Description: Instance profile for ADCs
    Value: !GetAtt IAMRoleStack.Outputs.CitrixNodesProfile
  PrimaryADCInstanceID:
    Description: Primary WAF instance ID
    Value: !GetAtt PrimaryADCInstance.Outputs.CitrixADCInstanceID
  PrimaryManagementPrivateNSIP:
    Description: Primary management private NSIP
    Value: !GetAtt PrimaryADCInstance.Outputs.ManagementPrivateNSIP
  PrimaryClientPublicEIP:
    Condition: UseClientEIP
    Description: Primary client public EIP
    Value: !GetAtt PrimaryADCInstance.Outputs.ClientPublicEIP
  PrimaryClientPrivateVIP:
    Description: Primary client private VIP
    Value: !GetAtt PrimaryADCInstance.Outputs.ClientPrivateVIP
  SecondaryADCInstanceID:
    Description: Secondary WAF instance ID
    Value: !GetAtt SecondaryADCInstance.Outputs.CitrixADCInstanceID
  SecondaryManagementPrivateNSIP:
    Description: Secondary management private NSIP
    Value: !GetAtt SecondaryADCInstance.Outputs.ManagementPrivateNSIP
  SecondaryClientPrivateVIP:
    Description: Secondary client private VIP
    Value: !GetAtt SecondaryADCInstance.Outputs.ClientPrivateVIP
